options(htmlhelp = TRUE,help_type='html')
?library
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
save.image("~/exemplo.RData")
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
X <- 8 #É importante lembrar que o R é sensível a diferenças maiúsculas e minúsculas
cha <- "nome"
num <- 2.843
int <- 4
comp <- 2i
log <- x < X
class(cha)
class(cha, num, int, comp, log)
class(int)
comp
int <- as.integer(4)
class(int)
int
num <- 2.843
as.integer(num)
cha <- "nome"
num <- 2.843
int <- 4 #Como padrão o R classifica os número como númericos, caso queira especificar como inteiro utilizar a função "as.integer()"
comp <- 2i
log <- x < X
comp #Para observar o conteúdo do objeto basta digitar seu nome
class(cha) #Esta função nos fala qual é a classe do objeto
cha <- c(cha, "cidade", "tal")
num <- 1:45
num
bagunça <- c("nome", 1837, TRUE, 2i)
bagunça
bagunça[2] + 1
class(bagunça)
cha <- c(cha, "cidade", "tal")
num <- 1:45                          #Cria um sequencia de 1 a 45
num                                  #Observe que a cada quebra de linha é novamente marcada a posição com []
mistura <- c("nome", 1837, TRUE, 2i) #Tentativa de criar um vetor com várias classes
mistura
class(mistura)                       #Monstra que o R interpretou todos os objetos como sendo caracteres
mistura[3]                       #De forma que não é possível realizar operações numéricas com o objeto na posição [2]: 1837
cha <- c(cha, "cidade", "tal")
cha <- "nome"
num <- 2.843
int <- 4      #Como padrão o R classifica os número como númericos, caso queira especificar como inteiro utilizar a função "as.integer()"
comp <- 2i
log <- x < X
comp          #Para observar o conteúdo do objeto basta digitar seu nome
class(cha) #Esta função nos fala qual é a classe do objeto
cha <- c(cha, "cidade", "tal")
TRUE
1
log <- x < X
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
X <- 8 #É importante saber que o R é sensível a diferenças maiúsculas e minúsculas
log <- x < X
rm(comp, log)
rm(comp, log, x, X) #Remove os objetos do ambiente
ls()
C_0 <- c(0.3, 0.6, 0.5, 0.1)
C_1 <- 0.5
V_1 <- 2
V_0 <- (0.5*2)/C_0
C_0 <- c(0.3, 0.6, 0.7, 0.4)
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
v <- TRUE
f <- FALSE
v*f
v+f
v-f
v/f
f/v
tabela1 <- data.frame(Soluções = c("Sódio", "Potássio", "Magnésio", "Cálcio"), C_0 = C_0, V_0 = V_0, C_1 = rep(C_1,4), V_1)
View(tabela1)
c
sum
sum()
cbind
?solve
??solve
?sum
??sum
?c
??c
??class
?class
?sqrt
X <- 8 #É importante saber que o R é sensível a diferenças maiúsculas e minúsculas
lenght(X)
length(X)
C_0 <- c(0.3, 0.6, 0.7, 0.4) #Concentração em cada tubo em g/ml
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes em ml
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
V_1
C_0 #Tamanho 4
length(C_0)
cha <- "nome"
mode(cha)    #Esta função nos fala qual é a modo do objeto
tabela1 <- data.frame(Soluções = c("Sódio", "Potássio", "Magnésio", "Cálcio"), C_0 = C_0, V_0 = V_0, C_1, V_1) #Além dos vetores com os valores que já obtemos anteriormente, também adicionamos um vetor com o nome dos solutos em cada solução
class(tabela 1)
class(tabela1)
data()
data(PlantGrowth)
head(PlantGrowth)
View(PlantGrowth)
data(DNase)
head(DNase)
View(PlantGrowth)
View(DNase)
data(CO2)
head(C02)
head(CO2)
data(titanic)
data(Titanic)
head(Titanic)
data(discoveries)
head(discoveries)
data(Orange)
head(Orange)
View(Orange)
---
title: "Introdução ao R {Prática 1} "
date: "27/07/2015"
output: html_document
---
Nesta primeira prática temos como objetivo:
* Apresentar as principais classes de objetos
* Fazer operações matemáticas simples com vetores
* Criar e manipular uma *data frame*
* Deixar algumas dicas para facilitar a inicialização no *R* e *RStudio*
*Crie um script "[seu_nome].R" para praticar com as ativdades aqui propostas*
No R, todas as entidades criadas e manipuladas são conhecidas como **Objetos**.
```{r}
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
X <- 8 #É importante saber que o R é sensível a diferenças maiúsculas e minúsculas
```
Os objetos criados ficarão armazenados no "Ambiente Global", e poderão ser salvos em um arquivo .Rdata, caso queira mantê-los para outras análises.
Se você está utilizando o RStudio, poderá observar o objeto criado e algumas de suas características em uma das janelas, se não, você pode usar a função "ls()" para isso.\
Existem cinco diferentes modos de objetos:\
\
- Carácter \
- Numérico (números reais)\
- Inteiro\
- Complexo\
- Lógico\
\
```{r}
cha <- "nome"
num <- 2.843
int <- 4      #Como padrão o R classifica os número como númericos, caso queira especificar como inteiro utilizar a função "as.integer()"
comp <- 2i
log <- x < X
comp          #Para observar o conteúdo do objeto basta digitar seu nome
mode(cha)    #Esta função nos fala qual é a modo do objeto
rm(comp, log, x, X) #Remove os objetos do ambiente
```
Tente você identificar o modo do objeto "int", altere-a para inteiro e em seguida faça o mesmo com o objeto "num".
Os **vetores** são os objetos mais básicos, neles é possível armazenar apenas elementos de mesma classe. Os objetos já criados são todos vetores com apenas uma posição "ocupada", por isso quando os vizualisamos aparece o [1] na frente, que indica a posição no vetor.
Para acrescentar mais valores aos vetores criados, podemos usar a função de concatenação c().\
\
Se você esta fazendo um script .R no RStudio e esqueceu os argumento de alguma função base, como a c(), digite "c(" e aperte a tecla "Tab" que terá algumas informações.
Também é muito útil saber que o próprio R fornece informações de todas as suas funções através da função "help()", que equivale a digitar no console "?" antes do nome da função, como "?c".\
\
Existe também a função "help.search()", que é o mesmo que utilizar "??" antes do nome da função, para procurar informações de várias formas, experimente "??c".
```{r}
?c                                  #Pedindo ajuda para o R para ter informações sobre a função "c()", a página com as informações aparece no navegador da internet ou em uma das janelas do RStudio
cha <- c(cha, "cidade", "tal")
cha[2]                               #Quando queremos lidar com um elemento específico dentro do vetor basta indicar sua posição utilizando []
num <- 5:45                         #Cria um vetor com a sequencia de 5 a 45 substituindo o objeto "num" que já existia
mistura <- c("nome", 1837, TRUE, 2i) #Tentativa de criar um vetor com várias classes
mistura
mode(mistura)                       #Monstra que o R interpretou todos os objetos como sendo caracteres
```
Uma vez criados vetores, é possivel realizar operações matemáticas entre eles, como em uma calculadora.
Veja o que acontece quando tentamos realizar uma operação adicionando 3 ao número na posição 2 do vetor "num".
```{r}
num[2] + 3
```
Agora faça o mesmo com o vetor "mistura". Por que isso acontece?
Tudo certo até agora? Podemos testar os conhecimentos adquiridos para resolver um probleminha de laboratório?
Imagine que você não armazenou corretamente suas soluções e o solvente evaporou deixando-as em concentrações desiguais de cada soluto:
```{r}
C_0 <- c(0.3, 0.6, 0.7, 0.4) #Concentração em cada tubo em g/ml
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes em ml
```
Para utilizá-las na sua reação é necessário que todas tenham concentração de 0.25 g/ml. Utilize a fórmula abaixo para saber quanto de solvente será necessário adicionar para ter tal concentração.\
$C_0*V_0=C_1*V_1$\
\
$V_1 = \frac{C_0*V_0}{C_1}$\
\
```{r}
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
V_1
```
Existem outros tipos de objetos que são mais complexos e têm o vetor como uma unidade de sua composição:
- **Listas** são um tipo especial de vetor que pode conter dados com mais de um tipo de classe
- **Matrizes** são vetores com dimensões
- **Fatores** são utilizados para representar dados categóricos
- **Data frames** são utilizados para armazenar dados tabulares, semelhante a tabelas que vemos no excel.
- As **funções** também são objetos do R, e os usuários também podem criar e utilizar as suas próprias adicionando-as ao ambiente de trabalho. É uma forma muito conveniente de expandir o R.
Nesta prática daremos destaque apenas as *data frames*.
As *data frames* são um conjunto de vetores de **mesmo tamanho** organizados em colunas.
```{r}
C_0 #Tamanho 4
length(C_0) #Para quando você perder a conta
V_0 #Tamanho 4
C_1 #Tamanho 1
C_1 <- rep(C_1, 4) #Como o vetor C_1 tem tamanho 1, a função "rep()" foi utilizada para repeti-lo 4 vezes
C_1 #Tamanho 4
V_1 #Tamanho 4
tabela1 <- data.frame(Soluções = c("Sódio", "Potássio", "Magnésio", "Cálcio"), C_0 = C_0, V_0 = V_0, C_1, V_1) #Além dos vetores com os valores que já obtemos anteriormente, também adicionamos um vetor com o nome dos solutos em cada solução
class(tabela1) #Fala qual é a classe do objeto, funciona também para indicar o modo de vetores
tabela1
```
Assim como para todos os objetos, é importante escolher nomes simples e explicativos para as colunas das *data frames* , o R não aceita nomes com separação por espaços.
Imagine agora que por algum motivo gostariamos de saber a quantidade total de soluto (em gramas), para isso faremos para cada solução:\
\
$massa = C_1 * V_1$
```{r}
massa <- tabela1[,4]*tabela1[,5] #Da mesma forma que fazemos com vetores podemos especificar a posição dos elementos que queremos nas data frames com [linha,coluna]
massa <- tabela1$C_1*tabela1$V_1 #Alternativamente podemos utilizar o simbolo "$" para indicar a coluna conforme o seu nome
cbind(tabela1, massa) #a função "cbind()" é específica para adicionar o vetor como uma nova coluna
```
Agora, para obter o total da massa dos solutos de todas as soluções:
```{r}
massa_total <- sum(massa) #A função "sum()" soma todos os elementos do vetor
massa_total
```
Na próxima prática mostraremos como exportar os dados tabulares criados em formato .csv (compatível com excel) e .txt. Também veremos como importar dados para serem analisados dentro do R.\
\
*Este material faz parte do mini-curso de "Introdução ao R" do IV Workshop de Férias em Genética e Melhoramento de Plantas organizado pelos alunos de pós-graduação do programa de Genética e Melhoramento de Plantas da ESALQ-USP.*
rm(tabela1, C_0, C_1, V_0, V_1, cha, int, massa, massa_total, mistura, num)
C_0 <- c(0.3, 0.6, 0.7, 0.4) #Concentração em cada tubo em g/ml
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes em ml
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
V_1
C_0 #Tamanho 4
length(C_0) #Para quando você perder a conta
V_0 #Tamanho 4
C_1 #Tamanho 1
C_1 <- rep(C_1, 4) #Como o vetor C_1 tem tamanho 1, a função "rep()" foi utilizada para repeti-lo 4 vezes
C_1 #Tamanho 4
V_1 #Tamanho 4
tabela1 <- data.frame(Soluções = c("Sódio", "Potássio", "Magnésio", "Cálcio"), C_0 = C_0, V_0 = V_0, C_1, V_1) #Além dos vetores com os valores que já obtemos anteriormente, também adicionamos um vetor com o nome dos solutos em cada solução
class(tabela1) #Fala qual é a classe do objeto, funciona também para indicar o modo de vetores
tabela1
massa <- tabela1[,4]*tabela1[,5] #Da mesma forma que fazemos com vetores podemos especificar a posição dos elementos que queremos nas data frames com [linha,coluna]
massa <- tabela1$C_1*tabela1$V_1 #Alternativamente podemos utilizar o simbolo "$" para indicar a coluna conforme o seu nome
cbind(tabela1, massa) #a função "cbind()" é específica para adicionar o vetor como uma nova coluna
teste <- edit(Orange)
getwd()
teste <- read.table("Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infect.txt", sep="\t", dec-".", head = TRUE)
teste <- read.table("Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txtt", sep="\t", dec-".", head = TRUE)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txtt", sep="\t", dec-".", head = TRUE)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txt", sep="\t", dec-".", head = TRUE)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txt", sep="\t", dec=".", head = TRUE)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txt", sep="\t", dec=".", head = TRUE, col.names=TRUE)
View(teste)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/hospital_infct.txt", sep="\t", dec=".", head = TRUE, col.names=FALSE)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/babybirds.txt", sep="\t", dec=".", head = TRUE)
View(teste)
teste <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/stat_females.txt", sep="\t", dec=".", head = TRUE)
View(teste)
head(alturas)
alturas <- read.table("~/Documents/Mestrado/Apresentação_Workshop_genética_2015/stat_females.txt", sep="\t", dec=".", head = TRUE)
head(alturas)
tail(alturas)
summary(alturas)
dim(alturas)
plot(alturas)
plot(alturas$Height, alturas$momheight)
plot(alturas$Height, alturas$dadheight)
Animais <- read.csv("http://amos.esalq.usp.br/Genomics/workshop/Animals2.csv", row.names=1)
plot(Animais$body, Animais$brain)
plot(log10(Animais$body), log10(Animais$brain))
text(log10(Animais$body), log10(Animais$brain), labels=row.names(Animais), cex=.75)
fit <- lm(log10(Animais$brain) ~ log10(Animais$body))
abline(fit)
reta1 <- lm(alturas$Height ~ alturas$momheight)
abline(reta1)
reta1 <- lm(alturas$Height ~ alturas$momheight)
abline(reta1)
?plot
title(main= "AlunaxPai")
title(main= c("Aluna","x","Pai")
)
title(main= "AlunaxPai")
title(main= "AlunaxPai", xlab = "Aluna", ylab= "Pai")
plot(alturas$Height, alturas$momheight, main= "AlunaxPai", xlab = "Aluna", ylab= "Pai")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col.axis="red")
xlab = "Aluna", ylab= "Mãe", col.lab="red")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col.lab="red")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.lab="blue")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.lab="blue", col.main="green")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.xlab="blue", col.main="green")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.xlab="blue", col.main="green")
plot(alturas$Height, alturas$momheight, main= "AlunaxMãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.lab="blue", col.main="green")
warnings()
plot(alturas$Height, alturas$momheight, main= "Aluna_Mãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="blue", col.lab="blue", col.main="green")
plot(alturas$Height, alturas$momheight, main= "Aluna_Mãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="pink", col.lab="pink", col.main="pink")
plot(alturas$Height, alturas$momheight, main= "Aluna_Mãe",
xlab = "Aluna", ylab= "Mãe", col="red", col.axis="purple", col.lab="purple", col.main="pink")
?col.main
??col.main
plot(alturas$Height, alturas$dadheight, main= "Aluna_Pai",
xlab = "Aluna", ylab= "Pai", col="red", col.axis=589,
col.lab=616, col.main= 490)
plot(alturas$Height, alturas$dadheight, main= "Aluna_Pai",
xlab = "Aluna", ylab= "Pai", col="red", col.axis=589,
col.lab=594, col.main= 490)
plot(alturas$Height, alturas$dadheight, main= "Aluna_Pai",
xlab = "Aluna", ylab= "Pai", col="red", col.axis=589,
col.lab= 562, col.main= 490)
plot(alturas$Height, alturas$dadheight, main= "Aluna_Pai",
xlab = "Aluna", ylab= "Pai", col= 490, col.axis=589,
col.lab= 562, col.main= 490)
plot(alturas$Height, alturas$dadheight, main= "Aluna_Pai",
xlab = "Aluna", ylab= "Pai", col= 490, col.axis=589,
col.lab= 562, col.main= 490)
source("http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.R")
View(HSVColors)
cha <- "nome"
num <- 2.843
int <- 4      #Como padrão o R classifica os número como númericos, caso queira especificar como inteiro utilizar a função "as.integer()"
comp <- 2i
log <- x < X
comp          #Para observar o conteúdo do objeto basta digitar seu nome
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
X <- 8 #É importante saber que o R é sensível a diferenças maiúsculas e minúsculas
log <- x < X
comp          #Para observar o conteúdo do objeto basta digitar seu nome
mode(cha)    #Esta função nos fala qual é a modo do objeto
x <- 5 #Para atribuir um valor ao objeto x utilizamos o sinal "<-"
xlab = "Aluna", ylab= "Pai", col="red", col.axis=589,
cha <- "nome"
num <- 2.843
int <- 4      #Como padrão o R classifica os número como númericos, caso queira especificar como inteiro utilizar a função "as.integer()"
comp <- 2i
log <- x < X
comp          #Para observar o conteúdo do objeto basta digitar seu nome
mode(cha)    #Esta função nos fala qual é a modo do objeto
cha <- c(cha, "cidade", "tal")
cha[2]                               #Quando queremos lidar com um elemento específico dentro do vetor basta indicar sua posição utilizando []
num <- 5:45                         #Cria um vetor com a sequencia de 5 a 45 substituindo o objeto "num" que já existia
mistura <- c("nome", 1837, TRUE, 2i) #Tentativa de criar um vetor com várias classes
mode(mistura)                       #Monstra que o R interpretou todos os objetos como sendo caracteres
num[2] + 3
C_0 <- c(0.3, 0.6, 0.7, 0.4) #Concentração em cada tubo em g/ml
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes em ml
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
V_1
C_0 #Tamanho 4
length(C_0) #Para quando você perder a conta
V_0 #Tamanho 4
C_1 #Tamanho 1
C_1 <- rep(C_1, 4) #Como o vetor C_1 tem tamanho 1, a função "rep()" foi utilizada para repeti-lo 4 vezes
C_1 #Tamanho 4
V_1 #Tamanho 4
tabela1 <- data.frame(C_0 = C_0, V_0 = V_0, C_1, V_1) #Gerando a data frame
row.names(tabela1) <- c("Sódio", "Potássio", "Magnésio", "Cálcio") #Além dos vetores com os valores que já obtemos anteriormente, também adicionamos um vetor com o nome dos solutos em cada solução
colnames (tabela1) <- c("Cinit", "Vinit", "Cfin", "Vfin") #Caso queira mudar o nome das colunas
class(tabela1) #Fala qual é a classe do objeto, funciona também para indicar o modo de vetores
Massa <- tabela1[,3]*tabela1[,4] #Da mesma forma que fazemos com vetores podemos especificar a posição dos elementos que queremos nas data frames com [linha,coluna]
Massa <- tabela1$Cfin*tabela1$Vfin #Alternativamente podemos utilizar o simbolo "$" para indicar a coluna conforme o seu nome
cbind(tabela1, Massa) #a função "cbind()" é específica para adicionar o vetor como uma nova coluna
massa_total <- sum(Massa) #A função "sum()" soma todos os elementos do vetor
rm(C_0, C_1, V_0, V_1, cha, int, massa, massa_total, mistura, num, comp, log, x, X #Remove os objetos do ambiente )
)
rm(Massa)
teste <- read.table("https://raw.github.com/Cristianetaniguti/Arquivos_workshop/master/stat_females.txt", sep="\t", dec=".", head = TRUE)
teste <- read.table("https://raw.githubusercontent.com/Cristianetaniguti/Arquivos_workshop/master/R_intro/stat_females.txt", sep="\t", dec=".", head = TRUE)
View(teste)
alturas <- read.table("https://raw.githubusercontent.com/Cristianetaniguti/Arquivos_workshop/master/R_intro/stat_females.txt", sep="\t", dec=".", head = TRUE)
head(alturas) #Mostra as seis primeiras linhas mais o cabeçalho
tail(alturas) #Mostra as seis últimas linhas mais o cabeçalho
summary(alturas)
dim(alturas)
C_0 <- c(0.3, 0.6, 0.7, 0.4) #Concentração em cada tubo em g/ml
V_0 <- c(3.5, 2.3, 1.7, 3.2) #Respectivos volumes em ml
C_1 <- 0.25
V_1 <- (C_0*V_0)/C_1
V_1
C_1 <- rep(C_1, 4) #Como o vetor C_1 tem tamanho 1, a função "rep()" foi utilizada para repeti-lo 4 vezes
tabela1 <- data.frame(C_0 = C_0, V_0 = V_0, C_1, V_1) #Gerando a data frame
row.names(tabela1) <- c("Na", "K", "Mg", "Ca") #Além dos vetores com os valores que já obtemos anteriormente, também adicionamos um vetor com o nome dos solutos em cada solução
colnames (tabela1) <- c("Cinit", "Vinit", "Cfin", "Vfin") #Caso queira mudar o nome das colunas
class(tabela1) #Fala qual é a classe do objeto, funciona também para indicar o modo de vetores
attach(tabela1)
Massa <- Cfin*Vfin
Massa <- tabela1$Cfin*tabela1$Vfin #Alternativamente podemos utilizar o simbolo "$" para indicar a coluna conforme o seu nome
?plot
?abline
?lm
getwd()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("devtools")
install.packages("xml2", dependencies=TRUE)
install.packages("rversions", dependencies=TRUE)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools", dependencies=TRUE)
install.packages("ggplot2")
library("ggplot2")
lbrary("maptools")
install.packages("maptools")
library(maptools)
library(ggplot2)
install.packages("devtools")
library(devtools)
x = rnorm(100)
y = rnorm(100)
plot(x, y)
scatter.smooth(x,y, col="red")
ls()
rm(x,y)
x = seq(1, 30)
x
w = 1 + sqrt(x)/2
regdados = data.frame(x=x, y=x + rnorm(x)*w )
regdados
regmod = lm( y ~ x, data=regdados)
plot( regmod )
summary( regmod )
plot( y ~ x, data=regdados )
abline( coef( regmod ), col="blue" )
plot( y ~ x, data=regdados )
abline( coef( regmod ), col="blue" )
lines(lowess(regdados), col="red")
x = seq(-pi, pi, len=100)
y = x
z = outer(x,y, function(x,y) cos(y)/(1 + x^2) )
oldpar = par(no.readonly=TRUE)
oldpar = par(no.readonly=TRUE)
par(pty="s")
contour(x,y,z, nlevels=15 )
contour(x,y, (z - t(z))/2, nlevels=15, col="darkgreen")
par(oldpar)
contour(x,y,z, nlevels=15 )
contour(x,y, (z - t(z))/2, nlevels=15, col="darkgreen")
par(pty="s")
contour(x,y,z, nlevels=15 )
contour(x,y, (z - t(z))/2, nlevels=15, col="darkgreen")
par(oldpar)
image(x,y,z)
image(x,y, (z-t(z))/2)
image(x,y, (z-t(z))/2)
image(x,y, (z-t(z))/2, col=terrain.colors(50))
image(x,y, (z-t(z))/2, col=terrain.colors(54))
image(x,y, (z-t(z))/2, col=terrain.colors(56))
image(x,y, (z-t(z))/2, col=terrain.colors(69))
image(x,y, (z-t(z))/2, col=terrain.colors(50))
contour(x,y, (z - t(z))/2, nlevels=15, col="darkgreen")
par(pty="s")
contour(x,y,z, nlevels=15 )
for(i in 1:10000) prod(1:i)
system.file(package="onemap")
setwd("/home/cristiane/R/x86_64-pc-linux-gnu-library/3.2/onema")
setwd("/home/cristiane/R/x86_64-pc-linux-gnu-library/3.2/onemap")
ls
example.out<- read.outcross("example.out.txt")
library(onemap)
example.out<- read.outcross("example.out.txt")
example.out <- read.outcross("example/example.out.txt")
getwd()
example.out <- read.outcross("/example/example.out.txt")
setwd("/home/cristiane/R/x86_64-pc-linux-gnu-library/3.2/onemap/example")
getwd()
example.out <- read.outcross("example.out.txt")
ls()
args(read.outcross)
example.out <- read.outcross(".", "example.out.txt")
outcross
example.out
twopts <- rf.2pts(example.out)
rf.2pts
twopts
print(twopts, "M1", "M3")
print(twopts, "M1", "M2")
q()
n
install.packages(tidyr)
install.packages("tidyr")
install.packages("ggplot2")
install.packages("dplyr")
setwd("~/Dropbox/Apresentacao_Makefile/Figures/")
